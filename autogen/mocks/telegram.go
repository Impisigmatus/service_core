// Code generated by MockGen. DO NOT EDIT.
// Source: telegram.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockIReciever is a mock of IReciever interface.
type MockIReciever struct {
	ctrl     *gomock.Controller
	recorder *MockIRecieverMockRecorder
}

// MockIRecieverMockRecorder is the mock recorder for MockIReciever.
type MockIRecieverMockRecorder struct {
	mock *MockIReciever
}

// NewMockIReciever creates a new mock instance.
func NewMockIReciever(ctrl *gomock.Controller) *MockIReciever {
	mock := &MockIReciever{ctrl: ctrl}
	mock.recorder = &MockIRecieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReciever) EXPECT() *MockIRecieverMockRecorder {
	return m.recorder
}

// GetOffset mocks base method.
func (m *MockIReciever) GetOffset() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockIRecieverMockRecorder) GetOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockIReciever)(nil).GetOffset))
}

// GetTimeout mocks base method.
func (m *MockIReciever) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout.
func (mr *MockIRecieverMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockIReciever)(nil).GetTimeout))
}

// Handle mocks base method.
func (m *MockIReciever) Handle(payload *tgbotapi.Message) (*tgbotapi.MessageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", payload)
	ret0, _ := ret[0].(*tgbotapi.MessageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIRecieverMockRecorder) Handle(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIReciever)(nil).Handle), payload)
}

// Mock_ITelegramAPI is a mock of _ITelegramAPI interface.
type Mock_ITelegramAPI struct {
	ctrl     *gomock.Controller
	recorder *Mock_ITelegramAPIMockRecorder
}

// Mock_ITelegramAPIMockRecorder is the mock recorder for Mock_ITelegramAPI.
type Mock_ITelegramAPIMockRecorder struct {
	mock *Mock_ITelegramAPI
}

// NewMock_ITelegramAPI creates a new mock instance.
func NewMock_ITelegramAPI(ctrl *gomock.Controller) *Mock_ITelegramAPI {
	mock := &Mock_ITelegramAPI{ctrl: ctrl}
	mock.recorder = &Mock_ITelegramAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock_ITelegramAPI) EXPECT() *Mock_ITelegramAPIMockRecorder {
	return m.recorder
}

// GetUpdatesChan mocks base method.
func (m *Mock_ITelegramAPI) GetUpdatesChan(cfg tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", cfg)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *Mock_ITelegramAPIMockRecorder) GetUpdatesChan(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*Mock_ITelegramAPI)(nil).GetUpdatesChan), cfg)
}

// Send mocks base method.
func (m *Mock_ITelegramAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *Mock_ITelegramAPIMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mock_ITelegramAPI)(nil).Send), c)
}
